1.仓库管理第一步-初始化仓库
命令：git init
备注：
1）让一个目录成为仓库，该命令创建后，该目录下会多一个.git目录，该目录是git的核心
.git目录是‘附属于该仓库的工作树’。文件的编辑等操作是在工作树中进行的，然后记录到仓库中，
以此管理文件的历史快照。
如果想将文件恢复到原先的状态，可以从仓库调取之前的快照，在工作树打开。开发者可以通过这种方式获取以往的文件
2）所谓提交（commit）是指记录工作树中所有文件的当前状态

2.查看仓库的工作状态
命令：git status

3.向暂存区（stage或者index）中存入文件
命令：git add
舍弃git add-git rm --cached <file>
舍弃修改之后的git add-git reset HEAD <file>

4.保存仓库的历史记录
命令：git commit
将当前暂存区的文件实际保存到仓库的历史记录中
备注：
1）记录一行提交信息
git commit -m "备注信息"
2）记录多行提交信息（详细提交信息）
git commit
一般有三行：
第一行：用一行文字简述要提交的更改内容
第二行：空行
第三行：记述更改的原因和详细内容

如果提交信息为空，该提交会被终止【不允许提交备注信息为空，git commit -m ""单行如果提交内容为空，也不允许提交】

5.查看日交日志
命令：git log
备注：
1)该命令主要是查看什么人在什么时候进行了提交或者合并，以及操作前后有怎样的区别
2）只显示提交信息的第一行：git log --pretty=short,少了日期和更改的原因
3）只显示指定目录，文件的日志：git log filename/dirName
4）显示文件的变动：git log -p


6.查看更改前后的区别
命令：git diff [filename]
备注：
1）查看工作树和暂存区的区别
git diff
'+'号标出的是新添加的行
'-'号标出的是被删除的行

2)查看工作树和最新提交的差别
git diff HEAD
好习惯：git commit前先git diff HEAD【这里的HEAD是指向当前分支中最后一次提交的指针】

7.显示分支一览表
命令：git branch
备注：
1）git branch -a，查询所有的分支，本地及远程

8.创建，切换分支
命令：git checkout -b
备注：
1）创建分支都有一个基础分支，比如现在我在master分支，创建了分支A，那么分支A此刻和master分支是完全一样的
2）git checkout -b 分支名= git branch 分支名+git checkout 分支名
3）切换到上一个分支：git checkout -
4）主干分支与特性分支
一般master是主干分支【一般是运行分支，随时比较稳定，随时都可以拿来做研究】
基于master分支创建的分支为特性分支，一般特性分支是合并到主干分支上去的【一般是新功能的开发或者是bug修复，不稳定】

9.合并分支
命令：git merge
备注：
1）想在哪个分支下合并另一个分支，
需要先切换到哪个分支下，然后git merge 另一个分支
为了在历史记录中明确记录下本次分支合并，我们需要创建合并提交，因此，在合并时加上--no-ff参数

10.已图表形式查看分支
命令：git log --graph

11.回溯历史版本【坐时光机回到过去，也可以回到未来】
命令：git reset --hard 提交的哈希值

12.查看所有的日志：因为git log是只能查看以当前状态为终点的历史日志
命令：git reflog

13.冲突解决
一般在push时，解决冲突即可

14.修改提交信息
命令：git commit --amend
备注：
1）一般用于修改提交备注，修改后的，对应的commit点的哈希值也变化了

15.压缩历史
命令：git rebase -i
备注：
1）一般用于把两条提交合并为一个提交，一般用于单词拼写错误等小修改
2）更改历史:git rebase -i HEAD~2【该命令选定当前分支中包含HEAD（最新提交）在内的两个最新历史记录为对象，并在编辑器中打开，打开后把要压缩的提交前面的pick变为fixup】

16.推送至远程仓库
步骤：
1）在github创建一个仓库，最好和本地的仓库名一样，还有创建时不要勾选‘initialize this repository with a README’
2)git remote add 仓库地址(添加远程仓库，一般是ssh，需要在github添加公钥，该命令会自动将远程仓库的名称设置为origin)
3）git push -u origin master（推送至远程分支,-u参数可以在推送给的同时，将origin仓库的master分支设置为本地仓库当前分支的upstream）
添加了这个参数，以后运行git pull命令从远程仓库获取内容时，本地仓库的这个分支就可以直接从origin的master分支获取内容，省去了另外添加参数的麻烦

17.从远程仓库拉取
命令：
1）git clone 仓库地址（ssh版和https版的）
2）git branch -a，可以查看远程和本地分支
3）获取远程的某个分支
git checkout -b 本地分支名 origin/远程分支名
最好本地分支名和远程分支名一样【git clone后本地默认有一个master分支，和远程一致】
4）git push
5）git pull origin 远程分支名【最好本地当前分支和要pull的远程是一个分支】


















